AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Backup resources for Photo Blog App Disaster Recovery

Parameters:
  AppName:
    Type: String
    Default: photo-blog-application
    Description: Name of the application

  StageName:
    Type: String
    Default: dev
    Description: Stage name for the API Gateway deployment
    AllowedValues: [dev, prod]

  PrimaryRegion:
    Type: String
    Default: eu-west-1
    Description: Primary AWS region

  PrimaryAccountId:
    Type: String
    Description: AWS Account ID where the primary region resources are deployed
    Default: !Ref AWS::AccountId

Resources:
  # Backup S3 Bucket
  BackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AppName}-${StageName}-backup-${AWS::Region}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled

  # Separate bucket policy resource
  BackupBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BackupBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowReplicationFromPrimaryRegion
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${PrimaryAccountId}:role/service-role/s3-replication-role"
            Action:
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ReplicateTags
              - s3:GetObjectVersionTagging
            Resource: !Sub "arn:aws:s3:::${AppName}-${StageName}-backup-${AWS::Region}-${AWS::AccountId}/*"
          - Sid: AllowReplicationConfigurationFromPrimaryRegion
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${PrimaryAccountId}:role/service-role/s3-replication-role"
            Action:
              - s3:GetReplicationConfiguration
              - s3:ListBucket
            Resource: !Sub "arn:aws:s3:::${AppName}-${StageName}-backup-${AWS::Region}-${AWS::AccountId}"

  # Backup Cognito User Pool
  BackupUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AppName}-${StageName}-backup-user-pool"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: given_name
          Required: true
          Mutable: true
        - Name: family_name
          Required: true
          Mutable: true

  BackupUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: BackupUserPool
    Properties:
      ClientName: !Sub "${AppName}-${StageName}-backup-client"
      UserPoolId: !Ref BackupUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  # DynamoDB Table for Cognito backup (recipient of global table replication)
  CognitoBackupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AppName}-${StageName}-cognito-backup"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # DynamoDB Table for Photos (recipient of global table replication)
  PhotosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AppName}-${StageName}-photos"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: photoId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: photoId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true

  # CloudWatch Alarm for monitoring the backup region
  BackupRegionHealthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AppName}-${StageName}-backup-region-health"
      AlarmDescription: "Alarm for monitoring the backup region health"
      MetricName: "StatusCheckFailed"
      Namespace: "AWS/EC2"
      Statistic: "Maximum"
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref BackupAlertTopic

  # SNS Topic for backup region alerts
  BackupAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AppName}-${StageName}-backup-alerts"
      DisplayName: "Backup Region Alerts"

Outputs:
  BackupBucketName:
    Description: Name of the backup S3 bucket
    Value: !Ref BackupBucket
    Export:
      Name: !Sub "${AppName}-${StageName}-backup-bucket-name"

  BackupBucketArn:
    Description: ARN of the backup S3 bucket
    Value: !GetAtt BackupBucket.Arn
    Export:
      Name: !Sub "${AppName}-${StageName}-backup-bucket-arn"

  BackupUserPoolId:
    Description: Backup Cognito User Pool ID
    Value: !Ref BackupUserPool
    Export:
      Name: !Sub "${AppName}-${StageName}-backup-user-pool-id"

  BackupUserPoolClientId:
    Description: Backup Cognito User Pool Client ID
    Value: !Ref BackupUserPoolClient
    Export:
      Name: !Sub "${AppName}-${StageName}-backup-user-pool-client-id"

  BackupAlertTopicArn:
    Description: ARN of the backup alert SNS topic
    Value: !Ref BackupAlertTopic
    Export:
      Name: !Sub "${AppName}-${StageName}-backup-alert-topic-arn"

  PhotosTableName:
    Description: Name of the photos DynamoDB table in backup region
    Value: !Ref PhotosTable
    Export:
      Name: !Sub "${AppName}-${StageName}-photos-table-name"

  CognitoBackupTableName:
    Description: Name of the Cognito backup DynamoDB table in backup region
    Value: !Ref CognitoBackupTable
    Export:
      Name: !Sub "${AppName}-${StageName}-cognito-backup-table-name"