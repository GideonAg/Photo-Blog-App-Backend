AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Personal Photo Blog App Backend

Parameters:
  AppName:
    Type: String
    Default: photo-blog
    Description: Name of the application

  StageName:
    Type: String
    Default: dev
    Description: Stage name for the API Gateway deployment
    AllowedValues: [dev, prod]

  DomainName:
    Type: String
    Default: mscv2group1.link
    Description: Domain name for the application

  FrontendBucketName:
    Type: String
    Default: photo-blog-frontend-assets
    Description: Name of the S3 bucket for frontend assets

  EmailSender:
    Type: String
    Default: notifications@mscv2group1.link
    Description: Email address to send notifications from

  PrimaryRegion:
    Type: String
    Default: us-east-1
    Description: Primary AWS region

  BackupRegion:
    Type: String
    Default: us-west-2
    Description: Backup AWS region for disaster recovery

# Define Globals
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: java11
    Handler: com.photoblog.Handler::handleRequest
    Environment:
      Variables:
        STAGE: !Ref StageName
        APP_NAME: !Ref AppName
        DOMAIN_NAME: !Ref DomainName
        EMAIL_SENDER: !Ref EmailSender
        PRIMARY_REGION: !Ref PrimaryRegion
        BACKUP_REGION: !Ref BackupRegion
        USER_POOL_ID: !Ref UserPool
        USER_POOL_CLIENT_ID: !Ref UserPoolClient
        PHOTOS_TABLE: !Ref PhotosTable
        STAGING_BUCKET: !Ref StagingBucket
        MAIN_BUCKET: !Ref MainBucket
        BACKUP_BUCKET: !Ref BackupBucket

  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: !Sub "'https://${DomainName}'"
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt UserPool.Arn

# Resources
Resources:
  # Cognito Resources
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AppName}-${StageName}-user-pool"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: given_name
          Required: true
          Mutable: true
        - Name: family_name
          Required: true
          Mutable: true
      LambdaConfig:
        PostConfirmation: !GetAtt WelcomeEmailFunction.Arn

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AppName}-${StageName}-client"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${AppName}-${StageName}"
      UserPoolId: !Ref UserPool

  # S3 Buckets
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AppName}-${StageName}-staging-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Days
            Status: Enabled
            ExpirationInDays: 30
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - !Sub "https://${DomainName}"
            MaxAge: 3600

  MainBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AppName}-${StageName}-main-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - !Sub "https://${DomainName}"
            MaxAge: 3600
      LifecycleConfiguration:
        Rules:
          - Id: MoveToGlacierAfter90Days
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
      ReplicationConfiguration:
        Role: !GetAtt S3ReplicationRole.Arn
        Rules:
          - Id: BackupReplication
            Status: Enabled
            Prefix: ""
            Destination:
              Bucket: !Sub "arn:aws:s3:::${AppName}-${StageName}-backup-${AWS::AccountId}"
              StorageClass: STANDARD

  BackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AppName}-${StageName}-backup-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled

  # DynamoDB Tables
  PhotosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AppName}-${StageName}-photos"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: photoId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: photoId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true

  CognitoBackupTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Sub "${AppName}-${StageName}-cognito-backup"
      ReplicationGroup:
        - Region: !Ref PrimaryRegion
        - Region: !Ref BackupRegion
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # SNS Topics
  SystemAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AppName}-${StageName}-system-alerts"
      DisplayName: "System Alerts"

  UserNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AppName}-${StageName}-user-notifications"
      DisplayName: "User Notifications"

  # SQS Queues
  ImageProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AppName}-${StageName}-image-processing"
      VisibilityTimeout: 300

  ProcessingRetryQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AppName}-${StageName}-processing-retry"
      DelaySeconds: 300
      VisibilityTimeout: 300

  # Lambda Functions
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.ApiHandler::handleRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - S3CrudPolicy:
            BucketName: !Ref StagingBucket
        - S3CrudPolicy:
            BucketName: !Ref MainBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt UserNotificationTopic.TopicName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ImageProcessingQueue.QueueName
      Events:
        PhotoUpload:
          Type: Api
          Properties:
            Path: /photos
            Method: post
        PhotoList:
          Type: Api
          Properties:
            Path: /photos
            Method: get
        PhotoGet:
          Type: Api
          Properties:
            Path: /photos/{photoId}
            Method: get
        PhotoDelete:
          Type: Api
          Properties:
            Path: /photos/{photoId}
            Method: delete
        PhotoShare:
          Type: Api
          Properties:
            Path: /photos/{photoId}/share
            Method: post
        RecycleBinList:
          Type: Api
          Properties:
            Path: /recycle-bin
            Method: get
        RecycleBinRestore:
          Type: Api
          Properties:
            Path: /recycle-bin/{photoId}/restore
            Method: post
        RecycleBinDelete:
          Type: Api
          Properties:
            Path: /recycle-bin/{photoId}
            Method: delete

  ImageProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.processing.ImageProcessingHandler::handleRequest
      Timeout: 300
      MemorySize: 1024
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - S3CrudPolicy:
            BucketName: !Ref StagingBucket
        - S3CrudPolicy:
            BucketName: !Ref MainBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt UserNotificationTopic.TopicName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ProcessingRetryQueue.QueueName
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ImageProcessingQueue.Arn
            BatchSize: 1

  ProcessingRetryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.processing.ProcessingRetryHandler::handleRequest
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ImageProcessingQueue.QueueName
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessingRetryQueue.Arn
            BatchSize: 1

  WelcomeEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.auth.WelcomeEmailHandler::handleRequest
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref DomainName

  LoginNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.notifications.LoginNotificationHandler::handleRequest
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref DomainName
      Events:
        CognitoPostAuth:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostAuthentication

  UserNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.notifications.ProcessingNotificationHandler::handleRequest
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref DomainName
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref UserNotificationTopic

  SystemAlertFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.notifications.SystemAlertHandler::handleRequest
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref DomainName
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SystemAlertTopic

  CognitoBackupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.disaster.CognitoBackupHandler::handleRequest
      Timeout: 300
      MemorySize: 1024
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CognitoBackupTable
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
              Resource:
                - !GetAtt UserPool.Arn
                - !Sub "arn:aws:cognito-idp:${BackupRegion}:${AWS::AccountId}:userpool/*"
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
            Name: CognitoBackupSchedule
            Description: Daily backup of Cognito user data

  # CloudWatch Alarms and Route53 Health Checks
  ApiGatewayAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AppName}-${StageName}-api-gateway-error-rate"
      AlarmDescription: "Alarm if API Gateway 5XX errors exceed threshold"
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref ServerlessRestApi
      AlarmActions:
        - !Ref SystemAlertTopic

  Route53HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Port: 443
        Type: HTTPS
        FullyQualifiedDomainName: !Ref DomainName
        RequestInterval: 30
        FailureThreshold: 3
      HealthCheckTags:
        - Key: Name
          Value: !Sub "${AppName}-${StageName}-health-check"

  Route53HealthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AppName}-${StageName}-health-check-alarm"
      AlarmDescription: "Alarm when the app is unreachable"
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: HealthCheckId
          Value: !Ref Route53HealthCheck
      AlarmActions:
        - !Ref SystemAlertTopic

  # IAM Roles
  S3ReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

Outputs:
  ApiUrl:
    Description: URL of the API Gateway endpoint
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  StagingBucketName:
    Description: Name of the staging S3 bucket
    Value: !Ref StagingBucket

  MainBucketName:
    Description: Name of the main S3 bucket
    Value: !Ref MainBucket

  BackupBucketName:
    Description: Name of the backup S3 bucket
    Value: !Ref BackupBucket

  PhotosTableName:
    Description: Name of the photos DynamoDB table
    Value: !Ref PhotosTable

  SystemAlertTopicArn:
    Description: ARN of the system alert SNS topic
    Value: !Ref SystemAlertTopic

  UserNotificationTopicArn:
    Description: ARN of the user notification SNS topic
    Value: !Ref UserNotificationTopic