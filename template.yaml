AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Personal Photo Blog App Backend with Multi-Region Disaster Recovery

# Define Parameters
Parameters:
  AppName:
    Type: String
    Default: photo-blog
    Description: Name of the application

  StageName:
    Type: String
    Default: dev
    Description: Stage name for the API Gateway deployment
    AllowedValues: [dev, prod]

  DomainName:
    Type: String
    Default: mscv2group1.link
    Description: Domain name for the application

  FrontendBucketName:
    Type: String
    Default: photo-blog-frontend-assets
    Description: Name of the S3 bucket for frontend assets

  EmailSender:
    Type: String
    Default: notifications@mscv2group1.link
    Description: Email address to send notifications from

  PrimaryRegion:
    Type: String
    Default: eu-west-1
    Description: Primary AWS region

  BackupRegion:
    Type: String
    Default: eu-central-1
    Description: Backup AWS region for disaster recovery

# Define Globals
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: java17
    Environment:
      Variables:
        STAGE: !Ref StageName
        APP_NAME: !Ref AppName
        DOMAIN_NAME: !Ref DomainName
        EMAIL_SENDER: !Ref EmailSender
        PRIMARY_REGION: !Ref PrimaryRegion
        BACKUP_REGION: !Ref BackupRegion
        PHOTOS_TABLE: !Ref PhotosTable
        STAGING_BUCKET: !Ref StagingBucket
        MAIN_BUCKET: !Ref MainBucket
        BACKUP_BUCKET: !Ref BackupBucket

# Resources
Resources:
  # S3 Buckets - Created first to avoid dependency issues
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AppName}-${StageName}-staging-${AWS::Region}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Days
            Status: Enabled
            ExpirationInDays: 30
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - !Sub "https://${DomainName}"
            MaxAge: 3600

  # S3 Cross Region Replication Policy
  S3ReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3ReplicationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${AppName}-${StageName}-main-${AWS::Region}-${AWS::AccountId}"
              - Effect: Allow
                Action:
                  - s3:GetObjectVersion
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionTagging
                Resource: !Sub "arn:aws:s3:::${AppName}-${StageName}-main-${AWS::Region}-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                Resource: !Sub "arn:aws:s3:::${AppName}-${StageName}-backup-${BackupRegion}-${AWS::AccountId}/*"

  MainBucket:
    Type: AWS::S3::Bucket
    DependsOn: [S3ReplicationRole, BackupBucket]
    Properties:
      BucketName: !Sub "${AppName}-${StageName}-main-${AWS::Region}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - !Sub "https://${DomainName}"
            MaxAge: 3600
      LifecycleConfiguration:
        Rules:
          - Id: MoveToGlacierAfter90Days
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
      ReplicationConfiguration:
        Role: !GetAtt S3ReplicationRole.Arn
        Rules:
          - Status: Enabled
            Id: ReplicateEverything
            Prefix: ""
            Destination:
              Bucket: !Sub "arn:aws:s3:::${AppName}-${StageName}-backup-${BackupRegion}-${AWS::AccountId}"
              StorageClass: STANDARD

  BackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AppName}-${StageName}-backup-${BackupRegion}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled

  # DynamoDB Tables
  PhotosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AppName}-${StageName}-photos"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: photoId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: photoId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true

  # Explicitly create a global table for photos to enable cross-region replication
  PhotosGlobalTable:
    Type: AWS::DynamoDB::GlobalTable
    DependsOn: PhotosTable
    Properties:
      TableName: !Sub "${AppName}-${StageName}-photos-global"
      AttributeDefinitions:
        - AttributeName: photoId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: photoId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Replicas:
        - Region: !Ref PrimaryRegion
        - Region: !Ref BackupRegion

  # SNS Topics
  SystemAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AppName}-${StageName}-system-alerts"
      DisplayName: "System Alerts"

  UserNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AppName}-${StageName}-user-notifications"
      DisplayName: "User Notifications"

  # SQS Queues
  ImageProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AppName}-${StageName}-image-processing"
      VisibilityTimeout: 300

  ProcessingRetryQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AppName}-${StageName}-processing-retry"
      DelaySeconds: 300
      VisibilityTimeout: 300

  # Cognito Resources - Primary Region
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AppName}-${StageName}-user-pool"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: given_name
          Required: true
          Mutable: true
        - Name: family_name
          Required: true
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: UserPool
    Properties:
      ClientName: !Sub "${AppName}-${StageName}-client"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn: UserPool
    Properties:
      Domain: !Sub "${AppName}-${StageName}"
      UserPoolId: !Ref UserPool

  # Cognito Resources - Backup Region (for DR)
  BackupUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AppName}-${StageName}-backup-user-pool"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: given_name
          Required: true
          Mutable: true
        - Name: family_name
          Required: true
          Mutable: true

  BackupUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: BackupUserPool
    Properties:
      ClientName: !Sub "${AppName}-${StageName}-backup-client"
      UserPoolId: !Ref BackupUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  # API Gateway
  PhotoBlogApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: !Sub "'https://${DomainName}'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # DynamoDB Table for Cognito backup
  CognitoBackupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AppName}-${StageName}-cognito-backup"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Explicitly create a global table for Cognito backup
  CognitoBackupGlobalTable:
    Type: AWS::DynamoDB::GlobalTable
    DependsOn: CognitoBackupTable
    Properties:
      TableName: !Sub "${AppName}-${StageName}-cognito-backup-global"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Replicas:
        - Region: !Ref PrimaryRegion
        - Region: !Ref BackupRegion

  # Lambda Functions - Separated by feature to avoid circular dependencies

  # Photo Upload and Query Functions
  PhotoUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.photos.PhotoUploadHandler::handleRequest
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          IMAGE_PROCESSING_QUEUE: !Ref ImageProcessingQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - S3CrudPolicy:
            BucketName: !Ref StagingBucket
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ImageProcessingQueue.QueueName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt UserNotificationTopic.TopicName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotoBlogApi
            Path: /photos
            Method: post

  PhotoQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.photos.PhotoQueryHandler::handleRequest
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PhotosTable
        - S3ReadPolicy:
            BucketName: !Ref MainBucket
      Events:
        ListPhotos:
          Type: Api
          Properties:
            RestApiId: !Ref PhotoBlogApi
            Path: /photos
            Method: get
        GetPhoto:
          Type: Api
          Properties:
            RestApiId: !Ref PhotoBlogApi
            Path: /photos/{photoId}
            Method: get

  # Photo Delete and Share Functions
  PhotoDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.photos.PhotoDeleteHandler::handleRequest
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - S3CrudPolicy:
            BucketName: !Ref MainBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotoBlogApi
            Path: /photos/{photoId}
            Method: delete

  PhotoShareFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.photos.PhotoShareHandler::handleRequest
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PhotosTable
        - S3ReadPolicy:
            BucketName: !Ref MainBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotoBlogApi
            Path: /photos/{photoId}/share
            Method: post

  # Recycle Bin Functions
  RecycleBinQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.photos.RecycleBinHandler::listDeletedPhotos
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PhotosTable
        - S3ReadPolicy:
            BucketName: !Ref MainBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotoBlogApi
            Path: /recycle-bin
            Method: get

  RecycleBinRestoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.photos.RecycleBinHandler::restorePhoto
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - S3CrudPolicy:
            BucketName: !Ref MainBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotoBlogApi
            Path: /recycle-bin/{photoId}/restore
            Method: post

  RecycleBinDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.photos.RecycleBinHandler::permanentlyDeletePhoto
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - S3CrudPolicy:
            BucketName: !Ref MainBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotoBlogApi
            Path: /recycle-bin/{photoId}
            Method: delete

  # Image Processing Functions
  ImageProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.processing.ImageProcessingHandler::handleRequest
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_NOTIFICATION_TOPIC: !Ref UserNotificationTopic
          PROCESSING_RETRY_QUEUE: !Ref ProcessingRetryQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - S3CrudPolicy:
            BucketName: !Ref StagingBucket
        - S3CrudPolicy:
            BucketName: !Ref MainBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt UserNotificationTopic.TopicName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ProcessingRetryQueue.QueueName
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ImageProcessingQueue.Arn
            BatchSize: 1

  ProcessingRetryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.processing.ProcessingRetryHandler::handleRequest
      Environment:
        Variables:
          IMAGE_PROCESSING_QUEUE: !Ref ImageProcessingQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ImageProcessingQueue.QueueName
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessingRetryQueue.Arn
            BatchSize: 1

  # Notification Functions
  WelcomeEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.auth.WelcomeEmailHandler::handleRequest
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref DomainName

  WelcomeEmailPermission:
    Type: AWS::Lambda::Permission
    DependsOn: WelcomeEmailFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WelcomeEmailFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  LoginNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.notifications.LoginNotificationHandler::handleRequest
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref DomainName
      Events:
        PostAuthentication:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostAuthentication

  UserNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.notifications.ProcessingNotificationHandler::handleRequest
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref DomainName
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref UserNotificationTopic

  SystemAlertFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.notifications.SystemAlertHandler::handleRequest
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref DomainName
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SystemAlertTopic

  # Disaster Recovery Functions
  BackupHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.disaster.BackupHandler::handleRequest
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          PRIMARY_REGION: !Ref PrimaryRegion
          BACKUP_REGION: !Ref BackupRegion
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - S3CrudPolicy:
            BucketName: !Ref MainBucket
        - S3CrudPolicy:
            BucketName: !Ref BackupBucket
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
            Name: DailyBackupSchedule
            Description: Daily backup of application data

  RestoreHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.disaster.RestoreHandler::handleRequest
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          PRIMARY_REGION: !Ref PrimaryRegion
          BACKUP_REGION: !Ref BackupRegion
          SYSTEM_ALERT_TOPIC: !Ref SystemAlertTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - S3CrudPolicy:
            BucketName: !Ref MainBucket
        - S3CrudPolicy:
            BucketName: !Ref BackupBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SystemAlertTopic.TopicName

  CognitoBackupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.disaster.CognitoBackupHandler::handleRequest
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          PRIMARY_USER_POOL_ID: !Ref UserPool
          COGNITO_BACKUP_TABLE: !Ref CognitoBackupGlobalTable
          PRIMARY_REGION: !Ref PrimaryRegion
          BACKUP_REGION: !Ref BackupRegion
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CognitoBackupGlobalTable
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
              Resource:
                - !GetAtt UserPool.Arn
                - !GetAtt BackupUserPool.Arn
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
            Name: CognitoBackupSchedule
            Description: Daily backup of Cognito user data

  CognitoSyncFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.disaster.CognitoSyncHandler::handleRequest
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          PRIMARY_USER_POOL_ID: !Ref UserPool
          BACKUP_USER_POOL_ID: !Ref BackupUserPool
          COGNITO_BACKUP_TABLE: !Ref CognitoBackupGlobalTable
          PRIMARY_REGION: !Ref PrimaryRegion
          BACKUP_REGION: !Ref BackupRegion
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CognitoBackupGlobalTable
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
              Resource:
                - !GetAtt UserPool.Arn
                - !GetAtt BackupUserPool.Arn
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)
            Name: CognitoSyncSchedule
            Description: Sync Cognito users between primary and backup pools every 6 hours

  Route53FailoverConfig:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.disaster.Route53FailoverHandler::handleRequest
      Timeout: 300
      MemorySize: 1024
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - route53:ChangeResourceRecordSets
                - route53:ListResourceRecordSets
                - route53:GetHostedZone
                - route53:ListHostedZones
              Resource: "*"
      Environment:
        Variables:
          PRIMARY_REGION: !Ref PrimaryRegion
          BACKUP_REGION: !Ref BackupRegion
          DOMAIN_NAME: !Ref DomainName

  DisasterRecoveryTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.photoblog.disaster.DisasterRecoveryTriggerHandler::handleRequest
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          RESTORE_FUNCTION_ARN: !GetAtt RestoreHandlerFunction.Arn
          PRIMARY_REGION: !Ref PrimaryRegion
          BACKUP_REGION: !Ref BackupRegion
          SYSTEM_ALERT_TOPIC: !Ref SystemAlertTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SystemAlertTopic.TopicName
        - Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt RestoreHandlerFunction.Arn

  # CloudWatch and Route53 for health monitoring
  PrimaryRegionHealthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AppName}-${StageName}-primary-region-health"
      AlarmDescription: "Alarm when the primary region services are unhealthy"
      MetricName: "5XXError"
      Namespace: "AWS/ApiGateway"
      Statistic: "Sum"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: "ApiName"
          Value: !Ref PhotoBlogApi
      AlarmActions:
        - !Ref SystemAlertTopic

  Route53HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Port: 443
        Type: HTTPS
        FullyQualifiedDomainName: !Ref DomainName
        RequestInterval: 30
        FailureThreshold: 3
      HealthCheckTags:
        - Key: Name
          Value: !Sub "${AppName}-${StageName}-health-check"

  BackupRegionStatusCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AppName}-${StageName}-backup-region-health"
      AlarmDescription: "Alarm when the backup region services are unhealthy"
      Namespace: "AWS/EC2"
      MetricName: "StatusCheckFailed"
      Statistic: "Maximum"
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref SystemAlertTopic
        - !GetAtt DisasterRecoveryTriggerFunction.Arn

  Route53HealthAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: Route53HealthCheck
    Properties:
      AlarmName: !Sub "${AppName}-${StageName}-health-check-alarm"
      AlarmDescription: "Alarm when the app is unreachable"
      MetricName: "HealthCheckStatus"
      Namespace: "AWS/Route53"
      Statistic: "Minimum"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "LessThanThreshold"
      Dimensions:
        - Name: "HealthCheckId"
          Value: !Ref Route53HealthCheck
      AlarmActions:
        - !Ref SystemAlertTopic

# Outputs
Outputs:
  ApiUrl:
    Description: URL of the API Gateway endpoint
    Value: !Sub "https://${PhotoBlogApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  BackupUserPoolId:
    Description: Backup Cognito User Pool ID
    Value: !Ref BackupUserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  BackupUserPoolClientId:
    Description: Backup Cognito User Pool Client ID
    Value: !Ref BackupUserPoolClient

  StagingBucketName:
    Description: Name of the staging S3 bucket
    Value: !Ref StagingBucket

  MainBucketName:
    Description: Name of the main S3 bucket
    Value: !Ref MainBucket

  BackupBucketName:
    Description: Name of the backup S3 bucket
    Value: !Ref BackupBucket

  PhotosTableName:
    Description: Name of the photos DynamoDB table
    Value: !Ref PhotosTable

  PhotosGlobalTableName:
    Description: Name of the photos global DynamoDB table
    Value: !Ref PhotosGlobalTable

  CognitoBackupGlobalTableName:
    Description: Name of the Cognito backup global DynamoDB table
    Value: !Ref CognitoBackupGlobalTable

  SystemAlertTopicArn:
    Description: ARN of the system alert SNS topic
    Value: !Ref SystemAlertTopic

  UserNotificationTopicArn:
    Description: ARN of the user notification SNS topic
    Value: !Ref UserNotificationTopic

  PrimaryRegion:
    Description: Primary AWS Region
    Value: !Ref PrimaryRegion

  BackupRegion:
    Description: Backup AWS Region for Disaster Recovery
    Value: !Ref BackupRegion